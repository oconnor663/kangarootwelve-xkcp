/* automatically generated by rust-bindgen */

pub type __uint8_t = ::std::os::raw::c_uchar;

// XXX: In C, this type's size is not a multiple of its alignment. That's
// difficult or impossible for bindgen to represent in Rust, and it leads to a
// padding workaround below in KangarooTwelve_Instance. For more details, see
// https://github.com/rust-lang/rust-bindgen/issues/1753.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KangarooTwelve_FStruct {
    pub state: [u8; 200usize],
    pub byteIOIndex: u8,
    pub squeezing: u8,
}
#[test]
fn bindgen_test_layout_KangarooTwelve_FStruct() {
    assert_eq!(
        ::std::mem::size_of::<KangarooTwelve_FStruct>(),
        202usize,
        concat!("Size of: ", stringify!(KangarooTwelve_FStruct))
    );
    // XXX: This test will pass, but what it's testing for is wrong. This
    // struct should have an alignment of 64. See the comment above the struct
    // definition. We can get away with this because this struct isn't public.
    // It's only used in KangarooTwelve_InstanceStruct, where we manually pad
    // it to the correct alignment.
    assert_eq!(
        ::std::mem::align_of::<KangarooTwelve_FStruct>(),
        1usize,
        concat!("Alignment of ", stringify!(KangarooTwelve_FStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<KangarooTwelve_FStruct>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_FStruct),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_FStruct>())).byteIOIndex as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_FStruct),
            "::",
            stringify!(byteIOIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_FStruct>())).squeezing as *const _ as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_FStruct),
            "::",
            stringify!(squeezing)
        )
    );
}
pub type KangarooTwelve_F = KangarooTwelve_FStruct;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct KangarooTwelve_InstanceStruct {
    pub queueNode: KangarooTwelve_F,
    // XXX: Bindgen doesn't currently generate this padding correctly. See
    // https://github.com/rust-lang/rust-bindgen/issues/1753 for details.
    _padding: [u8; 54],
    pub finalNode: KangarooTwelve_F,
    pub fixedOutputLength: usize,
    pub blockNumber: usize,
    pub queueAbsorbedLen: ::std::os::raw::c_uint,
    pub phase: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_KangarooTwelve_InstanceStruct() {
    assert_eq!(
        ::std::mem::size_of::<KangarooTwelve_InstanceStruct>(),
        512usize,
        concat!("Size of: ", stringify!(KangarooTwelve_InstanceStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<KangarooTwelve_InstanceStruct>(),
        64usize,
        concat!("Alignment of ", stringify!(KangarooTwelve_InstanceStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_InstanceStruct>())).queueNode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_InstanceStruct),
            "::",
            stringify!(queueNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_InstanceStruct>())).finalNode as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_InstanceStruct),
            "::",
            stringify!(finalNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_InstanceStruct>())).fixedOutputLength as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_InstanceStruct),
            "::",
            stringify!(fixedOutputLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_InstanceStruct>())).blockNumber as *const _
                as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_InstanceStruct),
            "::",
            stringify!(blockNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_InstanceStruct>())).queueAbsorbedLen as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_InstanceStruct),
            "::",
            stringify!(queueAbsorbedLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KangarooTwelve_InstanceStruct>())).phase as *const _ as usize
        },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(KangarooTwelve_InstanceStruct),
            "::",
            stringify!(phase)
        )
    );
}
pub type KangarooTwelve_Instance = KangarooTwelve_InstanceStruct;
extern "C" {
    #[doc = " Function to initialize a KangarooTwelve instance."]
    #[doc = " @param  ktInstance      Pointer to the instance to be initialized."]
    #[doc = " @param  outputByteLen   The desired number of output bytes,"]
    #[doc = "                         or 0 for an arbitrarily-long output."]
    #[doc = " @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Initialize(
        ktInstance: *mut KangarooTwelve_Instance,
        outputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Function to give input data to be absorbed."]
    #[doc = " @param  ktInstance      Pointer to the instance initialized by KangarooTwelve_Initialize()."]
    #[doc = " @param  input           Pointer to the input message data (M)."]
    #[doc = " @param  inputByteLen    The number of bytes provided in the input message data."]
    #[doc = " @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Update(
        ktInstance: *mut KangarooTwelve_Instance,
        input: *const ::std::os::raw::c_uchar,
        inputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Function to call after all the input message has been input, and to get"]
    #[doc = " output bytes if the length was specified when calling KangarooTwelve_Initialize()."]
    #[doc = " @param  ktInstance      Pointer to the hash instance initialized by KangarooTwelve_Initialize()."]
    #[doc = " If @a outputByteLen was not 0 in the call to KangarooTwelve_Initialize(), the number of"]
    #[doc = "     output bytes is equal to @a outputByteLen."]
    #[doc = " If @a outputByteLen was 0 in the call to KangarooTwelve_Initialize(), the output bytes"]
    #[doc = "     must be extracted using the KangarooTwelve_Squeeze() function."]
    #[doc = " @param  output          Pointer to the buffer where to store the output data."]
    #[doc = " @param  customization   Pointer to the customization string (C)."]
    #[doc = " @param  customByteLen   The length of the customization string in bytes."]
    #[doc = " @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Final(
        ktInstance: *mut KangarooTwelve_Instance,
        output: *mut ::std::os::raw::c_uchar,
        customization: *const ::std::os::raw::c_uchar,
        customByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Function to squeeze output data."]
    #[doc = " @param  ktInstance     Pointer to the hash instance initialized by KangarooTwelve_Initialize()."]
    #[doc = " @param  data           Pointer to the buffer where to store the output data."]
    #[doc = " @param  outputByteLen  The number of output bytes desired."]
    #[doc = " @pre    KangarooTwelve_Final() must have been already called."]
    #[doc = " @return 0 if successful, 1 otherwise."]
    pub fn KangarooTwelve_Squeeze(
        ktInstance: *mut KangarooTwelve_Instance,
        output: *mut ::std::os::raw::c_uchar,
        outputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
